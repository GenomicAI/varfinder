#!/usr/bin/bash
# Author : Shanika Amarasoma, Nuzla Ismail
# Date : Octomber 04, 2023
# Description : This command will Call the variants
# Usage : varfind-call.sh -f <reference fasta,fa file> -g <reference graph gbz file> -m <bam or gam file> -t <no of threads> -c <variant caller>
# ./varfind-call.sh -f NC_000020.11.fa -m HG00096.bam -c b -t 48
# ./varfind-call.sh -g vgindex.giraffe.gbz -m HG00096.gam -c v -t 48
# ./varfind-call.sh -f NC_000020.11.fa -m HG00096.bam -c d -i ~/singularity/deepvariant_1.5.0.sif -t 48

SHORT=f:,g:,c:,i:,m:,t:,h
LONG=file:,gbz:,caller:,image:,map:,threads:,help
OPTS=$(getopt -a -n varfind-call.sh --options $SHORT --longoptions $LONG -- "$@")

 help_text="Usage: varfind-call.sh [options]\n"
help_text+="-f | --file STR .fasta or .fa reference sequence file to map (If the mapper is not 'vg call')\n"
help_text+="-g | --gbz STR reference graph .gbz file (e.g. generated by varfind-graph.sh) if the mapper is 'vg call' \n"
help_text+="-m | --map STR .bam or .gam (if the caller is 'vg call') sequence alignment/map file\n"
help_text+="-c | --caller STR variant caller to use. 'b' for 'bcftools', 'f' for 'freebayes', 'g' for 'gatk HaplotypeCaller', 'd' for 'DeepVariant' and 'v' for 'vg call'. (Default 'b')\n"
help_text+="-i | --image STR Singularity image file if the caller run through singularity (Only for caller option 'g' and 'd')\n"
help_text+="-t | --threads INT number of threads to use (Default 'nproc')\n"
help_text+="-h | --help Display this help message\n"

eval set -- "$OPTS"
while :
do
  case "$1" in
	-f | --file )
      file="$2"
      shift 2
      ;;
	-g | --gbz )
      gbz="$2"
      shift 2
      ;;
	-m | --map )
      map="$2"
      shift 2
      ;;
	-c | --caller )
      caller="$2"
      shift 2
      ;;
	-i | --image )
      image="$2"
      shift 2
      ;;
	-t | --threads )
      threads="$2"
      shift 2
      ;;
    -h | --help )
      echo "Program : varfind-call.sh"
      echo "Version : 1.0"
      echo -e $help_text 
      exit 2
      ;;
    --)
      shift;
      break
      ;;
    *)
      echo "Unexpected option: $1";
	  exit 2
      ;;
  esac
done

# exit when any command fails
set -e

#Get present working directory
pwd=$(pwd)
log="${pwd}/varfinder.log"

#Function to print and log messages
function vflog(){
	echo $1;
	echo $1 >> $log
}
vflog " "
#Get Date
d=$(date)

if [ -z $caller ]; then
   caller="b";
fi

vflog ">>> Starting varfind-call worlflow on ${d} ..."

if [[ $caller == 'v' ]] ; then
	vflog "Variant caller is 'vg call'"
	vflog ">>> Checking for gbz file ..."
	
	if [ -z "$gbz" ] || [ ! -f "$gbz" ]; then
		vflog "The .gbz file ${gbz} does not exists or not specified by -g|--gbz <filename> !"
		echo -e $help_text
		exit 1;
	fi
	gbz=$(realpath $gbz)
	vflog ">>> Checking for gam file ..."
	if [ -z "$map" ] || [ ! -f "$map" ] || [ ${map##*.} != "gam" ]; then
		vflog "The .gam file ${map} does not exists, wrong or not specified by -m|--map <filename> !"
		echo -e $help_text
		exit 1;
	fi
	map=$(realpath $map)
else
	vflog ">>> Checking for sequence fasta file ..."

	if [ -z "$file" ] || [ ! -f "$file" ]; then
		vflog "The fasta file ${file} does not exists or not specified by -f|--file <filename> !"
		echo -e $help_text
		exit 1;
	fi

	file=$(realpath $file)

	vflog ">>> Checking the index file for $(basename ${file}) ..."
	if [ ! -f "${file}.fai" ]; then
		vflog ">>> Index file does not exists. Creating it..."
		samtools faidx $file;
	fi
	
	vflog ">>> Checking for bam file ..."
	if [ -z "$map" ] || [ ! -f "$map" ] || [ ${map##*.} != "bam" ]; then
		vflog "The .bam file ${map} does not exists, wrong or not specified by -m|--map <filename> !"
		echo -e $help_text
		exit 1;
	fi
	
	map=$(realpath $map)
	
	vflog ">>> Checking the index file for $(basename ${map}) ..."
	if [ ! -f "${map}.csi" ]; then
		vflog ">>> Index file does not exists. Creating it..."
		tabix -f $map;
	fi
fi



if [ ! -z "$image" ] ; then
	if [ ! -f "$image" ]; then
		vflog "The singulairty image file ${image} does not exists !"
		echo -e $help_text
		exit 1;
	fi
	image=$(realpath $image)
fi

re='^[0-9]+$'
if [ -z $threads ]; then
   threads=$(nproc);
   vflog "No number of threads are specified. Assigning default nproc=${threads}"; 
fi
if ! [[ $threads =~ $re ]] ; then
   echo "--threads must be an integer !"; exit 1;
fi

prefix=$(basename ${map%.*})
outvcf="${pwd}/${prefix}.varfind.${caller}.vcf"
if [[ $caller == 'b' ]] ; then
	vflog ">>> Variant call using bcftools call"
	bcftools mpileup -Ou -f $file $map | bcftools call -vmO z -o "${outvcf}.gz"
elif [[ $caller == 'f' ]] ; then
	vflog ">>> Variant call using freebayes call"
	freebayes -f $file $map | bgzip > "${outvcf}.gz"
elif [[ $caller == 'g' ]] ; then
	if [ -f "$image" ]; then
		echo ">>> Variant call using gatk HaplotypeCaller call (Singularity run)"
		if [ ! -f "${file%.*}.dict" ]; then
			singularity run -B ${pwd}:${pwd} $image gatk CreateSequenceDictionary -R "${file}" -O "${file%.*}.dict"
		fi
		singularity run -B ${pwd}:${pwd} $image gatk HaplotypeCaller -R $file -I $map -O "${outvcf}"
	else
		echo ">>> Variant call using gatk HaplotypeCaller call"
		if [ ! -f "${file%.*}.dict" ]; then
			gatk CreateSequenceDictionary -R "${file}" -O "${file%.*}.dict"
		fi
		gatk HaplotypeCaller -R $file -I $map -O "${outvcf}"
	fi
	bgzip -f "${outvcf}"

elif [[ $caller == 'd' ]] ; then
	if [ -f "$image" ]; then
		echo ">>> Variant call using Google DeepVariant call (Singularity run)"
		singularity run -B ${pwd}:${pwd} $image /opt/deepvariant/bin/run_deepvariant --model_type=WGS --ref="$file" --reads="$map" --output_vcf="${outvcf}" --num_shards="${threads}"
	else
		echo ">>> Variant call using Google DeepVariant call"
		/opt/deepvariant/bin/run_deepvariant --model_type=WGS --ref="$file" --reads="$map" --output_vcf="${outvcf}" --num_shards="${threads}"
	fi
	bgzip -f "${outvcf}"
elif [[ $caller == 'v' ]] ; then
	vflog ">>> Variant call using vg call"
	vg pack -x $gbz -g $map -t $threads -o "${pwd}/${prefix}.pack"
	vg call $gbz -k "${pwd}/${prefix}.pack" -t $threads > "${outvcf}"
	bgzip -f "${outvcf}"
else
	vflog "Unknown option \"${caller}\" for --caller!"
    echo -e $help_text
    exit 1;
fi
bcftools index "${outvcf}.gz"

d=$(date)
vflog ">>> Done varfind-call on ${d} !";
